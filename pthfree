#!/usr/bin/env python
from email.mime.text import MIMEText
import argparse
import configparser
import pthglobals as const
import io
import json
import os
import requests
import smtplib
import sqlite3
import sys
import time

session = None
database = None
last_request = time.time()
last_pushover_request = time.time()
last_pushbullet_request = time.time()


def config_get_user(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_USERNAME_ARG)


def config_get_password(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_PASSWORD_ARG)


def config_get_use_smtp(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].getboolean(const.CONFIG_USE_SMTP_ARG)


def config_get_use_pushover(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].getboolean(const.CONFIG_USE_PUSHOVER_ARG)


def config_get_use_pushbullet(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].getboolean(const.CONFIG_USE_PUSHBULLET_ARG)


def config_get_pushover_api_token(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_PUSHOVER_API_TOKEN_ARG)


def config_get_pushover_user_key(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_PUSHOVER_USER_TOKEN_ARG)


def config_get_pushbullet_token(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_PUSHBULLET_ACCESS_TOKEN_ARG)


def config_get_smtp_server(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SMTP_SERVER_ARG)


def config_get_smtp_port(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SMTP_PORT_ARG)


def config_get_smtp_tls(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].getboolean(const.CONFIG_SMTP_TLS_ARG)


def config_get_smtp_user(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SMTP_USER_ARG)


def config_get_smtp_password(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SMTP_PASSWORD_ARG)


def config_get_smtp_email(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SMTP_EMAIL_ARG)


def config_get_sendto(config):
    if const.CONFIG_SECTION not in config:
        return None
    return config[const.CONFIG_SECTION].get(const.CONFIG_SENDTO_ARG)


def config_set_user(config, username):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_USERNAME_ARG, username)


def config_set_password(config, password):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_PASSWORD_ARG, password)


def config_set_use_smtp(config, use_smtp):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_USE_SMTP_ARG, use_smtp)


def config_set_use_pushover(config, use_pushover):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_USE_PUSHOVER_ARG, use_pushover)


def config_set_use_pushbullet(config, use_pushbullet):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_USE_PUSHBULLET_ARG, use_pushbullet)


def config_set_pushover_api_token(config, pushover_api_token):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_PUSHOVER_API_TOKEN_ARG, pushover_api_token)


def config_set_pushover_user_key(config, pushover_user_key):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_PUSHOVER_USER_TOKEN_ARG, pushover_user_key)


def config_set_pushbullet_token(config, pushbullet_access_token):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_PUSHBULLET_ACCESS_TOKEN_ARG, pushbullet_access_token)


def config_set_smtp_server(config, server):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_SERVER_ARG, server)


def config_set_smtp_port(config, port):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_PORT_ARG, port)


def config_set_smtp_tls(config, tls):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_TLS_ARG, tls)


def config_set_smtp_user(config, user):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_USER_ARG, user)


def config_set_smtp_password(config, password):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_PASSWORD_ARG, password)


def config_set_smtp_email(config, email):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SMTP_EMAIL_ARG, email)


def config_set_sendto(config, sendto):
    if const.CONFIG_SECTION not in config:
        config.add_section(const.CONFIG_SECTION)
    config.set(const.CONFIG_SECTION, const.CONFIG_SENDTO_ARG, sendto)


def do_quit(message=None):
    if message:
        print(message)
    sys.exit(1)


def request(action, authkey, **kwargs):
    global last_request

    while time.time() - last_request < const.RATE_LIMIT:
        time.sleep(0.1)

    last_request = time.time()

    params = {"action": action}
    params.update(kwargs)
    params["auth"] = authkey

    r = session.get(const.AJAX_PAGE, params=params)
    try:
        parsed = json.loads(r.text)
        if parsed["status"] != "success":
            raise ValueError
        return parsed["response"]
    except ValueError:
        do_quit("Error while decoding authkey and passkey ajax response!")


def notify(torrent, config):
    global last_pushover_request, last_pushbullet_request
    if config_get_use_smtp(config):
        email = MIMEText(
            "New freeleech torrent at PTH available:\r\n\r\n%s?torrentid=%s\r\n\r\nYou should take a look at it!" % (
                const.TORRENT_PAGE, torrent["torrentId"]))
        email["Subject"] = "New freeleech torrent at PTH"
        email["From"] = config_get_smtp_email(config)
        email["To"] = config_get_sendto(config)

        if config_get_smtp_tls(config):
            smtp = smtplib.SMTP_SSL(host=config_get_smtp_server(config), port=config_get_smtp_port(config))
        else:
            smtp = smtplib.SMTP(host=config_get_smtp_server(config), port=config_get_smtp_port(config))
        smtp.login(config_get_smtp_user(config), config_get_smtp_password(config))
        smtp.send_message(email)
        smtp.quit()
    if config_get_use_pushover(config):
        while time.time() - last_pushover_request < const.RATE_LIMIT_PUSHOVER:
            time.sleep(0.1)
        last_pushover_request = time.time()
        title = "New freeleech torrent at PTH"
        text = "New freeleech torrent at PTH!\r\nYou should take a look at it!"
        url = "%s?torrentid=%s" % (const.TORRENT_PAGE, torrent["torrentId"])
        requests.post(const.PUSHOVER_API_TARGET, data={'token': config_get_pushover_api_token(config),
                                                       'user': config_get_pushover_user_key(config), 'message': text,
                                                       'title': title, 'url': url})
    if config_get_use_pushbullet(config):
        while time.time() - last_pushbullet_request < const.RATE_LIMIT_PUSHBULLET:
            time.sleep(0.1)
        last_pushbullet_request = time.time()
        title = "New freeleech torrent at PTH"
        text = "New freeleech torrent at PTH!\r\nYou should take a look at it!"
        url = "%s?torrentid=%s" % (const.TORRENT_PAGE, torrent["torrentId"])
        headers = {'Access-Token': config_get_pushbullet_token(config)}
        requests.post(const.PUSHBULLET_API_TARGET, headers=headers,
                      json={'type': 'link', 'title': title, 'body': text, 'url': url})


def check_and_store(group, torrent, quiet, config):
    global database
    if not database:
        database = sqlite3.connect(const.DATABASE_FILE, isolation_level=None)
    database.execute(
        "CREATE TABLE IF NOT EXISTS torrents (id INTEGER PRIMARY KEY)")
    r = database.execute("SELECT * FROM torrents WHERE id=?", (torrent["torrentId"],))
    t = r.fetchone()

    if not t:  # No torrent with that ID in database
        database.execute("INSERT INTO torrents (id) VALUES (?)", (torrent["torrentId"],))
        print("Notify about", group["artist"], "-", group["groupName"],
              "(%s %s)" % (torrent["format"], torrent["encoding"]))
        if not quiet:
            notify(torrent, config)
        else:
            print("Notification suppressed")
    else:
        print(group["artist"], "-", group["groupName"], "(%s %s)" % (torrent["format"], torrent["encoding"]),
              "was already known.")

    # Close the cursor (not needed anymore)
    r.close()


def main():
    global session

    parser = argparse.ArgumentParser(description="Notifies you about new freeleech torrents from PTH")
    parser.add_argument("-u", "--user", help="stores a new username in the config file")
    parser.add_argument("-p", "--password", help="stores a new password in the config file")
    choose_api_smtp = parser.add_mutually_exclusive_group()
    choose_api_smtp.add_argument("--smtp", help="use smtp (mail) as notification API", action="store_true",
                                 dest="use_smtp")
    choose_api_smtp.add_argument("--no-smtp", help="don't use smtp (mail) as notification API", action="store_true",
                                 dest="use_no_smtp")
    choose_api_pushover = parser.add_mutually_exclusive_group()
    choose_api_pushover.add_argument("--pushover", help="use Pushover as notification API", action="store_true",
                                     dest="use_pushover")
    choose_api_pushover.add_argument("--no-pushover", help="don't use Pushover as notification API",
                                     action="store_true", dest="use_no_pushover")
    choose_api_pushbullet = parser.add_mutually_exclusive_group()
    choose_api_pushbullet.add_argument("--pushbullet", help="use Pushbullet as notification API", action="store_true",
                                       dest="use_pushbullet")
    choose_api_pushbullet.add_argument("--no-pushbullet", help="don't use Pushbullet as notification API",
                                       action="store_true", dest="use_no_pushbullet")
    parser.add_argument("--pushover-api-token", help="stores a new Pushover API token in the config file",
                        dest="pushover_api_token")
    parser.add_argument("--pushover-user-key", help="stores a new Pushover user key in the config file",
                        dest="pushover_user_key")
    parser.add_argument("--pushbullet-token", help="stores a new Pushbullet access token in the config file",
                        dest="pushbullet_access_token")
    parser.add_argument("--smtp-server", help="stores a new smtp server in the config file", dest="smtp_server")
    parser.add_argument("--smtp-port", help="stores a new smtp server port in the config file", dest="smtp_port")
    smtp_tls = parser.add_mutually_exclusive_group()
    smtp_tls.add_argument("--smtp-tls", help="stores that the smtp server uses SSL/TLS in the config file",
                          action="store_true", dest="smtp_tls")
    smtp_tls.add_argument("--no-smtp-tls", help="stores that the smtp server does not use SSL/TLS in the config file",
                          action="store_true", dest="no_smtp_tls")
    parser.add_argument("--smtp-user", help="stores a new smtp server user in the config file", dest="smtp_user")
    parser.add_argument("--smtp-password", help="stores a new smtp server password in the config file",
                        dest="smtp_password")
    parser.add_argument("--smtp-email", help="stores a new FROM mail address for the smtp server", dest="smtp_email")
    parser.add_argument("-s", "--send-to", help="stores a new TO mail address for the notification emails",
                        dest="send_to")
    parser.add_argument("-q", "--quiet",
                        help="don't send any email, just collect and save freeleech torrents (useful if you already "
                             "downloaded all current freeleeches)", action="store_true")
    formats = parser.add_mutually_exclusive_group()
    formats.add_argument("--flac-only", help="only downloads FLAC torrents (including 24 bit)", action="store_true",
                         dest="flac_only")
    formats.add_argument("--mp3-v0-only", help="only downloads V0 torrents", action="store_true", dest="v0_only")
    formats.add_argument("--mp3-320-only", help="only downloads MP3 320 torrents", action="store_true", dest="mp3_only")
    args = parser.parse_args()

    config = configparser.ConfigParser()
    config.read(const.CONFIG_FILE)

    if args.use_pushover:
        config_set_use_pushover(config, "yes")
    elif args.use_no_pushover:
        config_set_use_pushover(config, "no")

    if args.use_pushbullet:
        config_set_use_pushbullet(config, "yes")
    elif args.use_no_pushbullet:
        config_set_use_pushbullet(config, "no")

    if args.use_smtp:
        config_set_use_smtp(config, "yes")
    elif args.use_no_smtp:
        config_set_use_smtp(config, "no")

    if args.user:
        config_set_user(config, args.user)
    if args.password:
        config_set_password(config, args.password)
    if args.smtp_server:
        config_set_smtp_server(config, args.smtp_server)
    if args.smtp_port:
        config_set_smtp_port(config, args.smtp_port)
    if args.smtp_user:
        config_set_smtp_user(config, args.smtp_user)
    if args.smtp_password:
        config_set_smtp_password(config, args.smtp_password)
    if args.smtp_email:
        config_set_smtp_email(config, args.smtp_email)
    if args.send_to:
        config_set_sendto(config, args.send_to)
    if args.pushover_api_token:
        config_set_pushover_api_token(config, args.pushover_api_token)
    if args.pushover_user_key:
        config_set_pushover_user_key(config, args.pushover_user_key)
    if args.pushbullet_access_token:
        config_set_pushbullet_token(config, args.pushbullet_access_token)

    # TLS will be off by default if not already stored otherwise in the config file
    if args.smtp_tls:
        config_set_smtp_tls(config, "yes")
    elif args.no_smtp_tls:
        config_set_smtp_tls(config, "no")

    if not config_get_user(config):
        do_quit("Please provide a username via command line for the config file!")
    elif not config_get_password(config):
        do_quit("Please provide a password via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_smtp_server(config):
        do_quit("Please provide a smtp server via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_smtp_port(config):
        do_quit("Please provide a smtp server port via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_smtp_user(config):
        do_quit("Please provide a smtp server username via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_smtp_password(config):
        do_quit("Please provide a smtp server password via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_smtp_email(config):
        do_quit("Please provide a sender email address via command line for the config file!")
    elif config_get_use_smtp(config) and not config_get_sendto(config):
        do_quit("Please provide a recipient email address via command line for the config file!")
    elif config_get_use_pushover(config) and not config_get_pushover_api_token(config):
        do_quit("Please provide a Pushover API token (app token) via command line for the config file!")
    elif config_get_use_pushover(config) and not config_get_pushover_user_key(config):
        do_quit("Please provide your Pushover user key via command line for the config file!")
    elif config_get_use_pushbullet(config) and not config_get_pushbullet_token(config):
        do_quit("Please provide your Pushbullet access token via command line for the config file!")

    if not os.path.exists(os.path.dirname(const.CONFIG_FILE)):
        os.makedirs(os.path.dirname(const.CONFIG_FILE))
    config_file = io.open(const.CONFIG_FILE, mode="wt")
    config.write(config_file)
    config_file.close()

    if not (config_get_use_smtp(config) or config_get_use_pushover(config) or config_get_use_pushbullet(config)):
        print("*****WARNING: No notification API in use, you won't get any notifications!*****")

    print("Logging in to PTH...")
    session = requests.Session()
    session.headers.update({"User-Agent": "pthfree v1.3 [api]"})
    r = session.post(const.LOGIN_PAGE,
                     {"username": config_get_user(config), "password": config_get_password(config)})
    if r.status_code != 200:
        do_quit("Error while logging into PTH (maybe wrong credentials?)")

    print("Requesting authkey and passkey...")
    r = request("index", None)
    authkey = r["authkey"]

    print("Downloading freeleech torrents list...")
    finished = False
    page = 1
    specific_format = args.flac_only or args.v0_only or args.mp3_only
    while not finished:
        r = request("browse", authkey, freetorrent=1, page=page)

        for group in r["results"]:
            if "torrents" not in group:
                continue
            for torrent in group["torrents"]:
                if not torrent["isFreeleech"]:
                    continue
                if "Lossless" in torrent["encoding"]:
                    if args.flac_only or not specific_format:
                        check_and_store(group, torrent, args.quiet, config)
                elif "320" in torrent["encoding"]:
                    if args.mp3_only or not specific_format:
                        check_and_store(group, torrent, args.quiet, config)
                elif "V0" in torrent["encoding"]:
                    if args.v0_only or not specific_format:
                        check_and_store(group, torrent, args.quiet, config)
                elif not specific_format:
                    check_and_store(group, torrent, args.quiet, config)

        if r["currentPage"] < r["pages"]:
            page += 1
        else:
            finished = True

    print("Logging out from PTH...")
    session.get(const.LOGOUT_PAGE, params={"auth": authkey})

    # Cleanup database
    if database:
        if database.in_transaction:
            database.rollback()
        database.close()

    print("Done!")


if __name__ == '__main__':
    main()
